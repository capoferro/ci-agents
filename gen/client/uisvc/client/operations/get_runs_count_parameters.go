// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetRunsCountParams creates a new GetRunsCountParams object
// with the default values initialized.
func NewGetRunsCountParams() *GetRunsCountParams {
	var ()
	return &GetRunsCountParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRunsCountParamsWithTimeout creates a new GetRunsCountParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRunsCountParamsWithTimeout(timeout time.Duration) *GetRunsCountParams {
	var ()
	return &GetRunsCountParams{

		timeout: timeout,
	}
}

// NewGetRunsCountParamsWithContext creates a new GetRunsCountParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRunsCountParamsWithContext(ctx context.Context) *GetRunsCountParams {
	var ()
	return &GetRunsCountParams{

		Context: ctx,
	}
}

// NewGetRunsCountParamsWithHTTPClient creates a new GetRunsCountParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRunsCountParamsWithHTTPClient(client *http.Client) *GetRunsCountParams {
	var ()
	return &GetRunsCountParams{
		HTTPClient: client,
	}
}

/*GetRunsCountParams contains all the parameters to send to the API endpoint
for the get runs count operation typically these are written to a http.Request
*/
type GetRunsCountParams struct {

	/*Repository*/
	Repository *string
	/*Sha*/
	Sha *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get runs count params
func (o *GetRunsCountParams) WithTimeout(timeout time.Duration) *GetRunsCountParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get runs count params
func (o *GetRunsCountParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get runs count params
func (o *GetRunsCountParams) WithContext(ctx context.Context) *GetRunsCountParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get runs count params
func (o *GetRunsCountParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get runs count params
func (o *GetRunsCountParams) WithHTTPClient(client *http.Client) *GetRunsCountParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get runs count params
func (o *GetRunsCountParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRepository adds the repository to the get runs count params
func (o *GetRunsCountParams) WithRepository(repository *string) *GetRunsCountParams {
	o.SetRepository(repository)
	return o
}

// SetRepository adds the repository to the get runs count params
func (o *GetRunsCountParams) SetRepository(repository *string) {
	o.Repository = repository
}

// WithSha adds the sha to the get runs count params
func (o *GetRunsCountParams) WithSha(sha *string) *GetRunsCountParams {
	o.SetSha(sha)
	return o
}

// SetSha adds the sha to the get runs count params
func (o *GetRunsCountParams) SetSha(sha *string) {
	o.Sha = sha
}

// WriteToRequest writes these params to a swagger request
func (o *GetRunsCountParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Repository != nil {

		// query param repository
		var qrRepository string
		if o.Repository != nil {
			qrRepository = *o.Repository
		}
		qRepository := qrRepository
		if qRepository != "" {
			if err := r.SetQueryParam("repository", qRepository); err != nil {
				return err
			}
		}

	}

	if o.Sha != nil {

		// query param sha
		var qrSha string
		if o.Sha != nil {
			qrSha = *o.Sha
		}
		qSha := qrSha
		if qSha != "" {
			if err := r.SetQueryParam("sha", qSha); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
